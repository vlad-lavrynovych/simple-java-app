// https://gist.github.com/darinpope/67c297b3ccc04c17991b22e1422df45a
pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: maven
            image: maven:3.8.3-openjdk-17
            command:
            - cat
            tty: true
            env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DOCKER_HOST
              value: tcp://localhost:2375
          - name: helm
            image: alpine/helm:3.11.1
            command:
            - cat
            tty: true
            env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DOCKER_HOST
              value: tcp://localhost:2375
          - name: docker
            image: docker:19.03.8-dind
            securityContext:
              privileged: true
            volumeMounts:
              - name: dind-storage
                mountPath: /var/lib/docker
          volumes:
          - name: dind-storage
            emptyDir: {}
        '''
    }
  }
    environment {
        DOCKER_REGISTRY = 'vlavrynovych'
        DOCKER_IMAGE = 'simple-java-app'
        DOCKER_CREDS = credentials('docker-hub-credentials')
    }

    stages {
        stage('Build, Test, Create Image, and Push to Docker Hub') {
            steps {
                container('maven') {
                  sh 'mvn -version'
                  git 'https://github.com/vlad-lavrynovych/simple-java-app'

                  // Build and test
                  sh 'mvn clean package'
                }
                container('docker') {
                  sh "docker login -u $DOCKER_CREDS_USR -p $DOCKER_CREDS_PSW"
                  script {
                      def imageName = "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
                      sh "docker build -t ${imageName} ."
                  }

                  // Push the Docker image to Docker Hub
                  sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy to Stage Test') {
            environment {
                STAGE = 'test'
            }
            steps {
                container('docker') {

                // Pull the Docker image from Docker Hub
                script {
                    def imageName = "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    sh "docker pull ${imageName}"
                }
                }
                container('helm') {
                git 'https://github.com/vlad-lavrynovych/simple-java-app'
                // Deploy to the test environment with 'test' profile using Helm
                sh "helm upgrade --install --namespace $STAGE --values ./deploy/values-test.yaml simple-java-app-test ./deploy/ --set image.tag=${BUILD_NUMBER} --set image.repository=${DOCKER_REGISTRY}  --set image.image=${DOCKER_IMAGE} --set stage=$STAGE"
                }
            }
        }

        stage('Deploy to Stage Prod') {
            environment {
                STAGE = 'prod'
            }
            steps {
                container('docker') {

                // Pull the Docker image from Docker Hub
                script {
                    def imageName = "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    sh "docker pull ${imageName}"
                }
                }
                container('helm') {
                git 'https://github.com/vlad-lavrynovych/simple-java-app'
                // Deploy to the production environment with 'prod' profile using Helm
                sh "helm upgrade --install --namespace $STAGE --values ./deploy/values-prod.yaml simple-java-app-prod ./deploy/ --set image.tag=${BUILD_NUMBER} --set image.repository=${DOCKER_REGISTRY}  --set image.image=${DOCKER_IMAGE} --set stage=$STAGE"
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
